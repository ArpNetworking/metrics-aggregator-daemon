# Pipelines
# ~~~~
pipelinesDirectory="config/pipelines"

# Http Server
# ~~~~
httpHost="0.0.0.0"
httpPort=7090
#httpHealthCheckPath="/ping"
#httpStatusPath="/status"
#supplementalHttpRoutesClass="com.example.MyAkkaRoutes"

# Metrics
# ~~~~
monitoringCluster="mad"
#monitoringService="mad"
#monitoringSinks=[
#  {
#    class = "com.arpnetworking.metrics.impl.ApacheHttpSink"
#    bufferSize = 10000
#    uri = "http://localhost:7090/metrics/v3/application"
#    parallelism = 2
#    maxBatchSize = 500
#    emptyQueueInterval = "PT0.5S"
#    eventsDroppedLoggingInterval = "PT1M"
#    dispatchErrorLoggingInterval = "PT1M"
#    unsupportedDataLoggingInterval = "PT1M"
#  }
#]
#jvmMetricsCollectionInterval="PT1.0S"

# NOTES:
# - metricsClientHost and metricsClientPort are deprecated
# - metricsClientHost and metricsClientPort no longer default from httpHost and httpPort
# - specifying metricsClientHost or metricsClientPort disables monitoringSinks
# - for backwards compatibility the legacy fields metricsClientHost and metricsClientPort
#   take precedence over monitoringSinks
# - migrate to monitoringSinks as soon as possible

# Logging
# ~~~~
logDirectory="logs"

# Akka
# ~~~~
akkaConfiguration {
  akka {
    loggers = [ "akka.event.slf4j.Slf4jLogger" ]
    loglevel="DEBUG"
    stdout-loglevel="DEBUG"
    logging-filter="akka.event.slf4j.Slf4jLoggingFilter"
    actor.debug.unhandled="on"
    
    # MAD is effectively a single client service and so a client sending large payloads is
    # only going to impact its own ability to accept and aggregate samples. However, if you
    # have misbehaving clients or running a multi-tenant setup, you can rachet this down.
    http.server.parsing.max-content-length="infinite"
  }
}
