# Pipeline
# ~~~~
name=example_pipeline

# Periods
# ~~~~
#periods=[
#    "PT1S"
#    "PT1M"
#]

# Statistics
# ~~~~
#timerStatistics=[
#    "median"
#    "tp90"
#    "tp99"
#    "mean"
#    "count"
#]
#counterStatistics=[
#    "mean"
#    "sum"
#    "count"
#]
#gaugeStatistics=[
#    "min"
#    "max"
#    "mean"
#]
#statistics={
#    Example:
#    "metric-name"=[
#        "tp65"
#    ]
#}

# Sources
# ~~~~
sources=[
  {
    type="com.inscopemetrics.mad.sources.ClientHttpSourceV1"
    name="http_v1_source"
  }
  {
    type="com.inscopemetrics.mad.sources.ClientHttpSourceV2"
    name="http_v2_source"
  }
  {
    ## The source type (required)
    type="com.inscopemetrics.mad.sources.StatsdUdpSource"

    ## Interface to bind to (optional, defaults to localhost)
    host="0.0.0.0"

    ## Name of the source (optional, defaults to statsd_udp_source)
    #name="statsd_udp_source"

    ## Port to listen on (optional, defaults to 8125)
    #port=8125
  }
  {
    type="com.inscopemetrics.mad.sources.MappingSource"
    name="graphite_plaintext_tcp_mapping_source"
    findAndReplace={
      "\\."=["/"]
    }
    source={
      ## The source type (required)
      type="com.inscopemetrics.mad.sources.GraphitePlaintextTcpSource"

      ## Interface to bind to (optional, defaults to localhost)
      host="0.0.0.0"

      ## Name of the source (optional, defaults to graphite_plaintext_tcp_source)
      #name="graphite_plaintext_tcp_source"

      ## Port to listen on (optional, defaults to 2003)
      #port=2003

      ## System listen queue length (optional, defaults to 100)
      #listenQueue=100

      ## The tags to add to the incoming data (optional, defaults to empty map)
      #globalTags={}

      ## Whether to parse Carbon formatted tags from the metric name (optional, defaults to false)
      ##
      ## See:
      ## http://graphite.readthedocs.io/en/latest/tags.html
      #parseCarbonTags=false
    }
  }
  {
    type="com.inscopemetrics.mad.sources.MappingSource"
    name="telegraf_json_tcp_mapping_source"
    findAndReplace={
      "\\."=["/"]
    }
    source={
      ## The source type (required)
      type="com.inscopemetrics.mad.sources.TelegrafJsonTcpSource"

      ## Interface to bind to (optional, defaults to localhost)
      host="0.0.0.0"

      ## Name of the source (optional, defaults to telegraf_json_tcp_source)
      #name="telegraf_json_tcp_source"

      ## Port to listen on (optional, defaults to 8094)
      #port=8094

      ## System listen queue length (optional, defaults to 100)
      #listenQueue=100

      ## The unit to interpret the timestamp in (optional, defaults to SECONDS)
      ##
      ## Valid values are:
      ## - SECONDS
      ## - MILLISECONDS
      ## - MICROSECONDS
      ## - NANOSECONDS
      #timestampUnit="SECONDS"
    }
  }
  {
    type="com.inscopemetrics.mad.sources.MappingSource"
    name="collectd_mapping_source"
    "findAndReplace": {
      "^cpu/([\\d]+)/(cpu|percent)/([^/]+)(/value)?": ["cpu/$3", "cpu/by_core/$1/$3"],
      "^snmp/cpu_detailed/([\\d]+)/([^/]+)(/value)?": ["snmp/cpu/$2", "snmp/cpu/by_core/$1/$2"],
      "^load/load/((1|5|15)min)": ["load/$1"],
      "^memory/memory/([^/]+)(/value)?": ["memory/$1"],
      "^vmem/vmpage_number/([^/]+)(/value)?": ["vmem/$1"],
      "^vmem/vmpage_io/([^/]+)/(.*)": ["vmem/io/$1/$2"],
      "^vmem/vmpage_faults/(.*)": ["vmem/faults/$1"],
      "^swap/swap/([^/]+)(/value)?": ["swap/$1"],
      "^swap/swap_io/([^/]+)(/value)?": ["swap/io/$1"],
      "^interface/([^/]+)/if_([^/]+)/(.*)": ["interface/$1/$3/$2"],
      "^disk/([^/]+)/disk_([^/]+)/(read|write)": ["disk/$1/$3/$2"],
      "^df/(.*)(/value)?": ["disk/$1"],
      "^ntpd/(.*)(/value)?": ["ntpd/$1"],
      "^processes/ps_state/([^/]+)(/value)?": ["processes/by_state/$1"],
      "^processes/([^/]+)/ps_(vm|rss|data|code|stacksize)(/value)?": ["processes/by_name/$1/$2"],
      "^processes/([^/]+)/ps_(cputime|count|pagefaults)/(.*)": ["processes/by_name/$1/$2/$3"],
      "^processes/([^/]+)/ps_disk_([^/]+)/(.*)": ["processes/by_name/$1/disk/$3/$2"],
      "^tcpconns/([^-]+)-(local|remote)/tcp_connections/([^/]+)(/value)?": ["tcpconns/$2/$1/$3"],
      "^tcpconns/all/tcp_connections/([^/]+)(/value)?": ["tcpconns/all/$1"],
      "^memcached/df/cache/(.*)": ["memcached/cache/$1"],
      "^memcached/memcached_command/([^/]+)(/value)?": ["memcached/commands/$1"],
      "^memcached/memcached_connections/current(/value)?": ["memcached/connections"],
      "^memcached/memcached_items/current(/value)?": ["memcached/items"],
      "^memcached/memcached_octets/rx": ["memcached/network/bytes_read"],
      "^memcached/memcached_octets/tx": ["memcached/network/bytes_written"],
      "^memcached/memcached_ops/([^/]+)(/value)?": ["memcached/operations/$1"],
      "^memcached/percent/([^/]+)(/value)?": ["memcached/$1"],
      "^memcached/ps_count/.*": [],
      "^memcached/ps_cputime/.*": [],
      "^uptime/uptime(/value)?": ["uptime/value"]
    },
    "source": {
      type="com.inscopemetrics.mad.sources.CollectdHttpSourceV1"
      name="collectd_http_source"
    }
  }
]

# Sinks
# ~~~~
sinks=[
  {
    type="com.inscopemetrics.mad.sinks.PeriodFilteringSink"
    name="telemetry_period_filtering_sink"
    excludeGreaterThan="PT1S"
    sink={
      type="com.inscopemetrics.mad.sinks.TelemetrySink"
      name="telemetry_sink"
    }
  }
]
