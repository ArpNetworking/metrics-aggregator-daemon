# Pipeline
# ~~~~
name=example_pipeline

# Periods
# ~~~~
#periods=[
#    "PT1S"
#    "PT1M"
#]

# Statistics
# ~~~~
#timerStatistics=[
#    "median"
#    "tp90"
#    "tp99"
#    "mean"
#    "count"
#]
#counterStatistics=[
#    "mean"
#    "sum"
#    "count"
#]
#gaugeStatistics=[
#    "min"
#    "max"
#    "mean"
#]
#statistics={
#    Example:
#    "metric-name"=[
#        "tp65"
#    ]
#}

# Sources
# ~~~~
kafka_source_bootstrap_host="localhost"
kafka_source_bootstrap_host=${?KAFKA_SOURCE_BOOTSTRAP_HOST}
kafka_source_bootstrap_port="9092"
kafka_source_bootstrap_port=${?KAFKA_SOURCE_BOOTSTRAP_PORT}
kafka_source_consumer_id="default"
kafka_source_consumer_id=${?HOSTNAME}
kafka_source_consumer_id=${?KAFKA_SOURCE_BOOTSTRAP_CONSUMER_ID}

sources=[
  {
    type="com.arpnetworking.metrics.common.sources.ClientHttpSourceV1"
    name="http_v1_source"
  }
  {
    type="com.arpnetworking.metrics.common.sources.ClientHttpSourceV2"
    name="http_v2_source"
  }
  {
    type="com.arpnetworking.metrics.common.sources.ClientHttpSourceV3"
    name="http_v3_source"
  }
  {
    type="com.arpnetworking.metrics.common.sources.PrometheusHttpSource"
    name="prometheus_source"
  }
  {
    type="com.arpnetworking.metrics.common.sources.StatsdSource"
    name="statsd_source"
    #port="8125"
  }
  {
    type="com.arpnetworking.metrics.common.sources.TcpLineSource"
    actorName="graphite-plaintext-tcp-source"
    name="graphite_plaintext_source"
    host="0.0.0.0"
    port="2003"
    parser={
      type="com.arpnetworking.metrics.mad.parsers.GraphitePlaintextToRecordParser"
      #globalTags={}
      #parseCarbonTags=false
    }
  }
  {
    type="com.arpnetworking.metrics.mad.sources.MappingSource"
    name="telegraftcp_mapping_source"
    findAndReplace={
      "\\."=["/"]
    }
    source={
      type="com.arpnetworking.metrics.common.sources.TcpLineSource"
      actorName="telegraf-tcp-source"
      name="telegraftcp_source"
      host="0.0.0.0"
      port="8094"
      parser={
        type="com.arpnetworking.metrics.mad.parsers.TelegrafJsonToRecordParser"
        timestampUnit="NANOSECONDS"
      }
    }
  }
  {
    type = "com.arpnetworking.metrics.mad.sources.MappingSource"
    name = "collectd_mapping_source"
    "findAndReplace": {
      "^cpu/([\\d]+)/(cpu|percent)/([^/]+)(/value)?": ["cpu/$3", "cpu/by_core/$1/$3"],
      "^snmp/cpu_detailed/([\\d]+)/([^/]+)(/value)?": ["snmp/cpu/$2", "snmp/cpu/by_core/$1/$2"],
      "^load/load/((1|5|15)min)": ["load/$1"],
      "^memory/memory/([^/]+)(/value)?": ["memory/$1"],
      "^vmem/vmpage_number/([^/]+)(/value)?": ["vmem/$1"],
      "^vmem/vmpage_io/([^/]+)/(.*)": ["vmem/io/$1/$2"],
      "^vmem/vmpage_faults/(.*)": ["vmem/faults/$1"],
      "^swap/swap/([^/]+)(/value)?": ["swap/$1"],
      "^swap/swap_io/([^/]+)(/value)?": ["swap/io/$1"],
      "^interface/([^/]+)/if_([^/]+)/(.*)": ["interface/$1/$3/$2"],
      "^disk/([^/]+)/disk_([^/]+)/(read|write)": ["disk/$1/$3/$2"],
      "^df/(.*)(/value)?": ["disk/$1"],
      "^ntpd/(.*)(/value)?": ["ntpd/$1"],
      "^processes/ps_state/([^/]+)(/value)?": ["processes/by_state/$1"],
      "^processes/([^/]+)/ps_(vm|rss|data|code|stacksize)(/value)?": ["processes/by_name/$1/$2"],
      "^processes/([^/]+)/ps_(cputime|count|pagefaults)/(.*)": ["processes/by_name/$1/$2/$3"],
      "^processes/([^/]+)/ps_disk_([^/]+)/(.*)": ["processes/by_name/$1/disk/$3/$2"],
      "^tcpconns/([^-]+)-(local|remote)/tcp_connections/([^/]+)(/value)?": ["tcpconns/$2/$1/$3"],
      "^tcpconns/all/tcp_connections/([^/]+)(/value)?": ["tcpconns/all/$1"],
      "^memcached/df/cache/(.*)": ["memcached/cache/$1"],
      "^memcached/memcached_command/([^/]+)(/value)?": ["memcached/commands/$1"],
      "^memcached/memcached_connections/current(/value)?": ["memcached/connections"],
      "^memcached/memcached_items/current(/value)?": ["memcached/items"],
      "^memcached/memcached_octets/rx": ["memcached/network/bytes_read"],
      "^memcached/memcached_octets/tx": ["memcached/network/bytes_written"],
      "^memcached/memcached_ops/([^/]+)(/value)?": ["memcached/operations/$1"],
      "^memcached/percent/([^/]+)(/value)?": ["memcached/$1"],
      "^memcached/ps_count/.*": [],
      "^memcached/ps_cputime/.*": [],
      "^uptime/uptime(/value)?": ["uptime/value"]
    }
    "source": {
      type = "com.arpnetworking.metrics.common.sources.CollectdHttpSourceV1"
      name = "collectd_http_source"
    }
  }
  {
    type="com.arpnetworking.metrics.common.sources.KafkaSource"
    name="kafka_source"
    consumer={
      type="org.apache.kafka.clients.consumer.Consumer"
      topics=["topic"]
      configs={
        # Set any properties defined at: https://kafka.apache.org/documentation/#consumerconfigs
        "bootstrap.servers"=${kafka_source_bootstrap_host}":"${kafka_source_bootstrap_port}
        "group.id"="metrics-aggregator-daemon"
        "client.id"=${kafka_source_consumer_id}
        "key.deserializer"="org.apache.kafka.common.serialization.ByteArrayDeserializer"
        "value.deserializer"="org.apache.kafka.common.serialization.ByteArrayDeserializer"
        "auto.offset.reset"="earliest"
      }
    }
    parser={
      type="com.arpnetworking.metrics.mad.parsers.ProtobufV2bytesToRecordParser"
    }
    pollTime="PT1S"
    shutdownAwaitTime="PT10S"
    backoffTime="PT1S"
  }
]

# Sinks
# ~~~~
periodic_statistics_interval="1000"
periodic_statistics_interval=${?PERIODIC_STATISTICS_INTERVAL}

telemetry_min_period=null
telemetry_min_period=${?TELEMETRY_MIN_PERIOD}
telemetry_max_period="PT1S"
telemetry_max_period=${?TELEMETRY_MAX_PERIOD}

cluster_aggregator_min_period="PT1M"
cluster_aggregator_min_period=${?CLUSTER_AGGREGATOR_MIN_PERIOD}
cluster_aggregator_max_period=null
cluster_aggregator_max_period=${?CLUSTER_AGGREGATOR_MAX_PERIOD}

cluster_aggregator_host="localhost"
cluster_aggregator_host=${?CLUSTER_AGGREGATOR_HOST}
cluster_aggregator_port="7066"
cluster_aggregator_port=${?CLUSTER_AGGREGATOR_PORT}

sinks=[
  {
    type="com.arpnetworking.tsdcore.sinks.PeriodicStatisticsSink"
    name="periodic_statistics_sink"
    intervalInMilliseconds=${periodic_statistics_interval}
  }
  {
    type="com.arpnetworking.tsdcore.sinks.PeriodFilteringSink"
    name="telemetry_period_filtering_sink"
    excludeLessThan=${telemetry_min_period}
    excludeGreaterThan=${telemetry_max_period}
    sink={
      type="com.arpnetworking.tsdcore.sinks.TelemetrySink"
      name="telemetry_sink"
      # TODO(ville): enable with mad-2.0
      #histogramStatistics = [
      #  "p25",
      #  "p50",
      #  "p75",
      #  "p90",
      #  "p99"
      #]
    }
  }
  {
    type="com.arpnetworking.tsdcore.sinks.PeriodFilteringSink"
    name="cluster_http_period_filtering_sink"
    excludeLessThan=${cluster_aggregator_min_period}
    excludeGreaterThan=${cluster_aggregator_max_period}
    sink={
      type="com.arpnetworking.tsdcore.sinks.AggregationServerHttpSink"
      name="cluster_http_sink"
      uri="http://"${cluster_aggregator_host}":"${cluster_aggregator_port}"/metrics/v1/data/persist"
    }
  }
]
