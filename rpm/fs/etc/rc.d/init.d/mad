#!/bin/sh
#
# mad Metrics aggregation daemon.
#
# chkconfig: - 60 40
# description: MAD is an aggregation daemon that computes local \
#   statistics on data and forwards them to upstream aggregation \
#   services
# processname: mad
# config: /opt/mad/config/config.conf
# pidfile: /var/run/mad.pid

# Source function library.
. /etc/rc.d/init.d/functions

user="mad"
prog="mad"
dir="/opt/mad"
log_dir="$dir/logs"
exec="/opt/mad/bin/mad"
pid_file="/var/run/mad.pid"

# There are two groups of arguments:
#   1) JVM (e.g. JVM_XMS, JAVA_OPTS, ADDITIONAL_JAVA_OPTS)
#   2) Application (e.g. MAD_CONFIG, APP_OPTS, ADDITIONAL_APP_OPTS)
#
# Each group has three flavors of arguments:
#   1) Explicit (e.g. JVM_XMS)
#   2) Default (e.g. JAVA_OPTS)
#   3) Additional (e.g. ADDITIONAL_JAVA_OPTS)
#
# The explicit arguments are commonly modified and should be used for these
# parameters instead of relying on default or additional arguments to set them.
#
# The default arguments are less common and rarely need to be modified. When
# you override the default you override all the defaults. You should not use
# defaults to change explicit arguments.
#
# The additional arguments let you add to and in some cases override default
# arguments without specifying all default arguments.
#
# Implementation note: the $JAVA_OPTS setting is added by automatically by the
# run script which is why you don't see it passed explicitly.
#
# Implementation note: when passing arguments with evaluated contents the
# result of the evaluation is not quoted because it cannot be determined
# whether the intention was to result in one or many arguments. Therefore, when
# using evaluated arguments always perform the quoting (if any) yourself.

export JAVA_HOME="$(dirname $(dirname $(readlink -f $(which java))))"
export JVM_XMS="64m"
export JVM_XMX="1024m"
export LOGBACK_CONFIG="-Dlogback.configurationFile=/opt/mad/config/logback.xml"
export MAD_CONFIG="/opt/mad/config/config.conf"
export JAVA_OPTS="\
    -XX:+HeapDumpOnOutOfMemoryError \
    -XX:HeapDumpPath=/opt/mad/logs/mad.oom.hprof \
    -XX:+PrintGCDetails \
    -XX:+PrintGCDateStamps \
    -Xloggc:/opt/mad/logs/mad.gc.log \
    -XX:NumberOfGCLogFiles=2 \
    -XX:GCLogFileSize=50M \
    -XX:+UseGCLogFileRotation \
    -XX:+UseStringDeduplication \
    -XX:+UseG1GC \
    -Duser.timezone=UTC"
export ADDITIONAL_JAVA_OPTS=""
export APP_OPTS=""
export ADDITIONAL_APP_OPTS=""

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

lockfile=/var/lock/$prog

get_pid() {
    if [ -f "$pid_file" ]; then
        cat "$pid_file" 2> /dev/null
    fi
    echo ""
}

is_running() {
    [ ! -f "$pid_file" ] && return 1
    kill -0 `get_pid` &> /dev/null && return 0 || return 1
}

start() {
    [ -f $CONFIG_FILE ] || exit 6
    echo -n $"Starting $prog: "
    if is_running; then
        warning "$prog: already running"
    else
        cd "$dir"
        su "$user" -s /bin/sh -c "nice $exec ${LOGBACK_CONFIG} -Xms${JVM_XMS} -Xmx${JVM_XMX} ${ADDITIONAL_JAVA_OPTS} -- ${APP_OPTS} ${MAD_CONFIG} ${ADDITIONAL_APP_OPTS} >> $log_dir/system.out 2>&1 & echo \$!" > $pid_file
        if ! is_running; then
            failure "$prog did not start"
            retval=1
        else
            success
            retval=0
        fi
    fi
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    if is_running; then
        kill `get_pid`
        for i in {1..10}
        do
            if ! is_running; then
                break
            fi

            echo -n "."
            sleep 1
        done
        if is_running; then
            warning
            echo
            echo -n "Killing $prog: "
            kill -9 `get_pid`
            for i in {1..10}
            do
                if ! is_running; then
                    break
                fi

                echo -n "."
                sleep 1
            done
        fi

        if is_running; then
            failure
            echo
            retval=1
        else
            success
            echo
            if [ -f "$pid_file" ]; then
                rm "$pid_file"
            fi
            retval=0
        fi
    else
        warning
        echo
        echo "$prog: not running"
        if [ -f "$pid_file" ]; then
            rm "$pid_file"
        fi
        retval=0
    fi
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    is_running
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
